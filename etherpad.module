<?php
// $Id$

/**
 * @file
 * Defines an Etherpad field that allows etherpads to be easily embedded on a
 * page via an etherpad.
 */

/**
 * Implementation of hook_field_info().
 */
function etherpad_field_info() {
  return array(
    'etherpad' => array(
      'label' => t('Etherpad field'),
      'description' => t('Easily create and embed Etherpads into a page.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 * shown: at general setup of this field type on a content type
 */
function etherpad_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form['etherpad_url'] = array(
        '#type' => 'textfield',
        '#title' => t('URL of Etherpad install'),
        '#description' => t('Add the URL of the etherpad install you\'ll be using to host the etherpads. This can be either a <a href="http://etherpad.org/public-sites/">public site</a> or one you host yourself'),
        '#default_value' => $field['etherpad_url'],
      );
      $form['attributes'] = array(
        '#tree' => TRUE,
      );
      $form['attributes']['class'] = array(
        '#type' => 'textfield',
        '#title' => t('Additional CSS Class'),
        '#description' => t('When output, etherpads will have this class attribute. Multiple classes should be separated by spaces.'),
        '#default_value' => empty($field['attributes']['class']) ? '' : $field['attributes']['class'],
      );
      $form['attributes']['width'] = array(
        '#type' => 'textfield',
        '#title' => t('width of the etherpad'),
        '#description' => t('etherpads need fixed width and height, only numbers are allowed.'),
        '#default_value' => empty($field['attributes']['width']) ? '100%' : $field['attributes']['width'],
        '#maxlength' => 4,
        '#size' => 4,
      );
      $form['attributes']['height'] = array(
        '#type' => 'textfield',
        '#title' => t('height of the etherpad'),
        '#description' => t('etherpads need fixed width and height, only numbers are allowed.'),
        '#default_value' => empty($field['attributes']['height']) ? '700' : $field['attributes']['height'],
        '#maxlength' => 4,
        '#size' => 4,
      );

      return $form;

    case 'validate':
      if (empty($field['attributes']['width']) || (int)$field['attributes']['width']<1) {
        form_set_error('width_value', t('A default width and height must be provided.'));
      }
      if (empty($field['attributes']['height']) || (int)$field['attributes']['height']<1) {
        form_set_error('height_value', t('A default width and height must be provided.'));
      }
      break;

    case 'save':
      return array('attributes', 'etherpad_url');

    case 'database columns':
      return array(
        'etherpad_url' => array('type' => 'varchar', 'length' => 1024, 'not null' => TRUE,),
        'etherpad_id' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE,),
        'attributes' => array('type' => 'text', 'size' => 'medium', 'not null' => FALSE),
      );
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function etherpad_content_is_empty($item, $field) {
  dpm($field, 'field in hook_content_is_empty');
  if (empty($field['etherpad_url'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field().
 */
function etherpad_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'sanitize':
      // TODO if teaser, change to html only view.
      foreach ($items as $delta => $value) {
        _etherpad_sanitize($items[$delta], $delta, $field, $node);
      }
      break;
    case 'presave':
      dpm($field);
      dpm($items);
//      _etherpad_sanitize
      break;
  }
}

/**
 * Implementation of hook_widget_info().
 */
function etherpad_widget_info() {
  return array(
    'etherpad' => array(
      'label' => 'Etherpad',
      'field types' => array('etherpad'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function etherpad_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implementation of hook_widget_settings(). 
 */
function etherpad_widget_settings($op, $widget) {
  dpm($op, 'op in widget_settings');
  dpm($widget);

}

/**
 * Cleanup user-entered values for a etherpad field according to field settings.
 *
 * @param $item
 *   A single etherpad item, usually containing url, title, and attributes.
 * @param $delta
 *   The delta value if this field is one of multiple fields.
 * @param $field
 *   The CCK field definition.
 * @param $node
 *   The node containing this etherpad.
 */
function _etherpad_sanitize(&$item, $delta, &$field, &$node) {
  static $etherpad_count = 0; // unique ids for all etherpads on a page, on many-node-pages too

  // Add attributes defined at the field level, if set.
  if (is_array($field['attributes'])) {
    foreach ($field['attributes'] as $attribute => $attbvalue) {
      if (!empty($attbvalue) && $attbvalue != 'default' && $attbvalue != 'user' && !isset($attributes[$attribute])) {
        $attributes[$attribute] = $attbvalue;
      }
    }
  }
  $item['attributes'] = $attributes;
  $item['etherpad_url'] = $field['etherpad_url'];
  $item['etherpad_id'] = "doof";
dpm($item);
dpm($node);
  // Add identifier for the etherpad html code
  $item['html-id'] = 'etherpad-' . $etherpad_count;
  $etherpad_count++;
  if (!isset($item['attributes']['class'])) {
    $item['attributes']['class'] = '';
  }
  $item['attributes']['class'] .= ' etherpad-delta-' . $delta;
}

/**
 * Implementation of hook_theme().
 */
function etherpad_theme() {
  return array(
    'etherpad_field_settings' => array(
      'arguments' => array('element' => NULL),
    ),
    'etherpad_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'etherpad' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_etherpad($element) {
  //drupal_add_css(drupal_get_path('module', 'etherpad') .'/etherpad.css');
  return $element['#children'];
}

/**
 * Implementation of hook_elements().
 */
function etherpad_elements() {
  $elements = array();
  $elements['etherpad'] =  array(
    '#input' => TRUE,
    '#process' => array('etherpad_process'),
  );
  return $elements;
}

/**
 * Process the etherpad type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function etherpad_process($element, $edit, $form_state, $form) {
  dpm($element);
  $field = $form['#field_info'][$element['#field_name']];
  $defaults = $element['#value'];
  $element['embed_etherpad'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed an etherpad in this page?'),
    '#default_value' => TRUE,
  );
  $element['etherpad_url'] = array(
    '#title' => t('Etherpad Install URL'),
    '#type' => 'textfield',
    '#default_value' => $defaults['etherpad_url'],
    '#weight' => 3,
  );
//  $element['etherpad_url'] = array('#type' => 'value', '#value' => $field['etherpad_url']);
  $element['#etherpad_id'] = "doof";
  $element['attributes'] = array('#type' => 'value', '#value' => $field['attributes']);

  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function etherpad_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Simple embedded etherpad'),
      'field types' => array('etherpad'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_etherpad_formatter_default($element) {
  //dpm($element);
  // If no etherpad_url given display nothing.
  if (empty($element['#item']['etherpad_url'])) {
    return '';
  }
  dpm("inside etherpad theme");
  // Display all
  return etherpad_etherpad($element['#item']['etherpad_url'], $element['#item']);
}

/*
 * validate size: width and height of an etherpad
 */
function etherpad_validate_size($size, $default = "100") {
  if (is_numeric($size)) {
    return $size>0? $size : $default;
  }
  if (preg_match('/^\d+\%$/', $size)) {
    return $size;
  }
  return $default;
}

/*
 * like central function
 * form the etherpad code
 */
function etherpad_etherpad($path, $options = FALSE) {
  if (!$options) {
    $options = array();
  }
  // Merge in defaults.
  $options += array(
    'attributes' => array(),
  );
  if (!isset($options['attributes']['width'])) {
    $options['attributes']['width'] = '100%';
  }
  if (!isset($options['attributes']['height'])) {
    $options['attributes']['height'] = '701';
  }
$path = $path . "doof?_theme=nano"; // Randomly generate id, figure out why this doesn't want to work on book / polls. Fetch html, for teaser, show straight HTML
  $htmlid = '';
  if (isset($options['html-id']) && !empty($options['html-id'])) {
    $htmlid = ' id="' . $options['html-id'] . '" name="' . $options['html-id'] . '"';
  }
  return ('<iframe src="' . check_url(url($path, $options)) . '"' . drupal_attributes($options['attributes']) .
    $htmlid .
    '>' .
     t('Your browser does not support iframes. But You can use the following link.') /*. ' ' . /*l('Link', url($path, $options), $options_link)*/ . '</iframe>');
}
